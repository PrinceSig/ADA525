---
layout: post
title:  "Assignment 08: Web server 2"
date:   2023-11-21 20:30:00 +0200
categories: jekyll update
---

### **Web server 2**  

In this assignment I extended the simple server application from the previous assignment (assignment 7), and replaced the random data with gyroscope data from a microcontroller. The data is fed to the server application through serial transmission using a serial port (eg. "COM3" on a Windows computer). I used the serialport package to allow the server application to recieve data as serial input from an "Adafruit Feather Bluefruit Sense" sensor-board.

#### Code

My project consists of the same three files as in assignment 7, written in javascript (.js), javacript object notation (.json), and hypertext markup language (.html). The project has the regular package files, the main program file called "app.js", and a folder named "public", that contains the two files "app.js" and "index.html". The code from assignment 7 has been reused to some degree, but some significant changes were made to include serial input.

Here is the code for my main program file:

{% highlight javascript %}
const express = require('express');
const SerialPort = require('serialport');
const Readline = require('@serialport/parser-readline');

const app = express();
const port = 3000;

// Serial port setup
const serialport = new SerialPort({path: 'COM3'}, { baudRate: 9600 }); // Change 'COM3' to your Arduino port
const parser = serialport.pipe(new Readline({ delimiter: '\r\n' }));

app.use(express.static('public'));

app.get('/data', (req, res) => {
  // Read data from Arduino and send it to the client
  parser.on('data', (data) => {
    const jsonData = { value: parseFloat(data) };
    res.json(jsonData);
  });
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
{% endhighlight %}

The code for "app.js" inside the "public" folder:

{% highlight javascript %}
const ctx = document.getElementById('data-chart').getContext('2d');
const dataChart = new Chart(ctx, {
  type: 'line',
  data: {
    labels: [],
    datasets: [
      {
        label: 'Data',
        data: [],
        borderColor: 'rgba(75, 192, 192, 1)', // Set line color
        borderWidth: 2,
        fill: true,
      },
    ],
  },
  options: {
    responsive: true,
    scales: {
      x: [{
        type: 'time', // Set the x-axis to be a time scale
      }],
      y: {
        beginAtZero: true,
      },
    },
    plugins: {
      title: {
        display: true,
        text: 'Real-time Data Chart', // Set chart title
      },
      legend: {
        position: 'top', // Set legend position
      },
    },
  },
});

function updateData() {
  fetch('/data')
    .then((response) => response.json())
    .then((data) => {
      const timestamp = new Date();
      dataChart.data.labels.push(timestamp);
      dataChart.data.datasets[0].data.push(data.value);

      const maxDataPoints = 10;
      if (dataChart.data.labels.length > maxDataPoints) {
        dataChart.data.labels.shift();
        dataChart.data.datasets[0].data.shift();
      }

      dataChart.update();
      updateData(); // Recursive call for continuous updates
    })
    .catch((error) => {
      console.error('Error fetching data:', error);
    });
}

// Initial data update
updateData();
{% endhighlight %}

#### Result

The result is a webpage that displays a line plot, with up to 100 random values between 0 and 100. The graph is updated every 6 seconds. When the limit of 100 values is reached (after 10 minutes), the graph shifts to the left and so that the most recent 100 values are displayed. I am satisfied with the end result, as well as with the knowledge I have gained in working with this assignment (although plenty more could be done to make the webpage more advanced and/or aestethically pleasing).

![ass07_1](https://github.com/PrinceSig/ADA525/assets/94006886/d3b3f120-d5d5-4832-942f-c627ebce9eb0){: width="700" }