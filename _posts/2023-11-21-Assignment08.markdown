---
layout: post
title:  "Assignment 08: Web server 2"
date:   2023-11-21 20:30:00 +0200
categories: jekyll update
---

### **Web server 2**  

In this assignment I extended the simple server application from the previous assignment (assignment 7), and replaced the random data with gyroscope data from a microcontroller. The data is fed to the server application through serial transmission using a serial port (eg. "COM3" on a Windows computer). I used the serialport package to allow the server application to recieve data as serial input from an "Adafruit Feather Bluefruit Sense" sensor-board.

#### Code

My project consists of the same three files as in assignment 7, written in javascript (.js), javacript object notation (.json), and hypertext markup language (.html). The project has the regular package files, the main program file called "app.js", and a folder named "public", that contains the two files "app.js" and "index.html". The code from assignment 7 has been reused to some degree, but some significant changes were made to include serial input.

Here is the code for my main program file:

{% highlight javascript %}
const express = require('express');
const SerialPort = require('serialport');
const Readline = require('@serialport/parser-readline');

const app = express();
const port = 3000;

// Serial port setup
const serialport = new SerialPort({path: 'COM3'}, { baudRate: 9600 }); // Change 'COM3' to your Arduino port
const parser = serialport.pipe(new Readline({ delimiter: '\r\n' }));

app.use(express.static('public'));

app.get('/data', (req, res) => {
  // Read data from Arduino and send it to the client
  parser.on('data', (data) => {
    const jsonData = { value: parseFloat(data) };
    res.json(jsonData);
  });
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
{% endhighlight %}

The code for "app.js" inside the "public" folder:

{% highlight javascript %}
document.addEventListener('DOMContentLoaded', () => {
  // Function to update gyroscope data
  function updateGyroscopeData() {
    fetch('/gyroscopeData')
      .then((response) => response.json())
      .then((gyroscopeData) => {
        // Display gyroscope data on the webpage
        document.getElementById('xCoordinate').textContent = `X: ${gyroscopeData.x}`;
        document.getElementById('yCoordinate').textContent = `Y: ${gyroscopeData.y}`;
        document.getElementById('zCoordinate').textContent = `Z: ${gyroscopeData.z}`;
      })
      .catch((error) => {
        console.error('Error fetching gyroscope data:', error);
      });
  }

  // Initial data update
  updateGyroscopeData();

  // Schedule periodic updates (every 1000 ms = 1 second)
  setInterval(updateGyroscopeData, 1000);
});
{% endhighlight %}

And finally the code for my index file:

{% highlight html %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Gyroscope Data</title>
  <!-- Include any necessary stylesheets or libraries here -->
</head>
<body>
  <h1>Gyroscope Data</h1>
  <div id="gyroscopeData">
    <p id="xCoordinate">X: </p>
    <p id="yCoordinate">Y: </p>
    <p id="zCoordinate">Z: </p>
  </div>
  <!-- Include your script file -->
  <script src="app.js"></script>
</body>
</html>
{% endhighlight %}

#### Result

The result is a webpage that displays values for each axis in a 3 dimensional space (x, y, z), where each value corresponds to the angular velocity of the respective axis, as measured by the integrated gyroscope of the Adafruit Bluefruit Sense. The values are updated every second. I planned to make the visual representation more interesting, but visualizing gyro data in a reasonable way proved to be a challenge. Including a graph that displayed the historical movements in each axis seemed to be a reasonable addition to my project, but in the end this was also excluded due to limited time resources... 

![ass08](https://github.com/PrinceSig/ADA525/assets/94006886/8d27f180-96c2-4c63-a543-9b14babcb900){: width="700" }
 